{"version":3,"file":"static/js/779.662bf8d2.chunk.js","mappings":"wTAsEA,EAtDqB,WACnB,IACA,ECf+B,SAAAA,GAC/B,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,2FACnBF,GAAW,GADQ,mBAGIG,EAAAA,EAAAA,IAAiBV,GAHrB,OAGXW,EAHW,OAIjBR,EAAaQ,GAJI,gDAMjBN,EAAS,KAAMO,SANE,yBAQjBL,GAAW,kBAAM,CAAN,IARM,4EAAH,qDAYlBE,GACD,GAAE,CAACT,IAEG,CAAEE,UAAAA,EAAWE,MAAAA,EAAOE,QAAAA,EAC5B,CDHKO,EALgBC,EAAAA,EAAAA,MAAZC,SACR,IACEb,UAAaF,EADf,EACeA,GAAIgB,EADnB,EACmBA,MAAOC,EAD1B,EAC0BA,OAAQC,EADlC,EACkCA,OAAQC,EAD1C,EAC0CA,SAAUC,EADpD,EACoDA,MAClDhB,EAFF,EAEEA,MACAE,EAHF,EAGEA,QAGF,OACE,SAAC,KAAD,WACE,UAAC,KAAD,WACGF,IAAS,SAAC,KAAD,UAAUA,IACnBE,IAAW,SAACe,EAAA,EAAD,IACXrB,IACC,iCACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEsB,IAAKJ,EACLK,UAAU,0BACVC,IAAKR,OAGT,SAAC,KAAD,WACE,UAAC,KAAD,YACE,wBAAKA,KACL,yBAAG,eAAaI,EAAM,QACtB,wBAAI,cACJ,uBAAID,KACJ,wBAAI,YACJ,uBAAIF,eAKZ,UAAC,KAAD,YACE,yBACE,SAAC,KAAD,CAAeQ,GAAG,OAAlB,SAAyB,YAE3B,yBACE,SAAC,KAAD,CAAeA,GAAG,UAAlB,SAA4B,kBAGhC,SAAC,EAAAC,SAAD,CAAUC,UAAU,yBAAK,uBAAzB,UACE,SAAC,KAAD,aAOb,C","sources":["pages/MovieDetails.jsx","hooks/useFetchMovieInfo.js"],"sourcesContent":["import { Grid } from 'components/Cast/Cast.styled';\nimport { Container, Heading, Section } from 'components/Home/Home.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  Card,\n  CardBody,\n  RowG,\n  ColMd4,\n  ColMd8,\n  Img,\n} from 'components/MovieDetails/MovieDetails.styled';\nimport { NavLinkStyled } from 'components/SharedLayout/SharedLayout.styled';\nimport { useFetchMovieInfo } from 'hooks/useFetchMovieInfo';\nimport { Suspense } from 'react';\nimport { Outlet, useParams } from 'react-router-dom';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const {\n    movieInfo: { id, title, genres, poster, overview, score },\n    error,\n    loading,\n  } = useFetchMovieInfo(movieId);\n\n  return (\n    <Section>\n      <Container>\n        {error && <Heading>{error}</Heading>}\n        {loading && <Loader />}\n        {id && (\n          <>\n            <Card>\n              <RowG>\n                <ColMd4>\n                  <Img\n                    src={poster}\n                    className=\"img-fluid rounded-start\"\n                    alt={title}\n                  />\n                </ColMd4>\n                <ColMd8>\n                  <CardBody>\n                    <h2>{title}</h2>\n                    <p>User score: {score}%</p>\n                    <h3>Overview</h3>\n                    <p>{overview}</p>\n                    <h3>Genres</h3>\n                    <p>{genres}</p>\n                  </CardBody>\n                </ColMd8>\n              </RowG>\n            </Card>\n            <Grid>\n              <li>\n                <NavLinkStyled to=\"Cast\">Cast</NavLinkStyled>\n              </li>\n              <li>\n                <NavLinkStyled to=\"Reviews\">Reviews</NavLinkStyled>\n              </li>\n            </Grid>\n            <Suspense fallback={<div>Loading subpage...</div>}>\n              <Outlet />\n            </Suspense>\n          </>\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default MovieDetails;\n","import { useEffect, useState } from 'react';\nimport { getInfoMovieByID } from 'service/movies-service';\n\nexport const useFetchMovieInfo = id => {\n  const [movieInfo, setMovieInfo] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const getMovieInfo = async () => {\n      setLoading(true);\n      try {\n        const result = await getInfoMovieByID(id);\n        setMovieInfo(result);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(() => false);\n      }\n    };\n\n    getMovieInfo();\n  }, [id]);\n\n  return { movieInfo, error, loading };\n};\n"],"names":["id","useState","movieInfo","setMovieInfo","error","setError","loading","setLoading","useEffect","getMovieInfo","getInfoMovieByID","result","message","useFetchMovieInfo","useParams","movieId","title","genres","poster","overview","score","Loader","src","className","alt","to","Suspense","fallback"],"sourceRoot":""}